module Door_System(
    input wire [3:0] btn,
    input wire clk, reset,
    output reg y,
    output reg green_led,  
    output reg red_led  
);

    reg [2:0] state, next_state; 
    reg [11:0] seq; // input seq 

    reg [3:0] timer; // B? ??m th?i gian
    reg [3:0] led_timer; // B? ??m cho ?èn LED
    reg [3:0] blink_timer; // B? ??m nh?p nháy ?èn ??
    reg [1:0] blink_count; // S? l?n nh?p nháy

    parameter S0 = 0 , S1 = 1 , S2 = 2 , S3 = 3, S4 = 4, error = 5, success = 6;

    parameter TIME_OUT  = 10;  // 10 giây
    parameter LED_TIME = 30;   // 3 giây (30 chu k? clock n?u chu k? clock là 10ns)
    parameter BLINK_TIME = 5;  // M?i l?n nh?p nháy kéo dài 5 chu k? clock
    parameter MAX_BLINK = 3;   // Nh?p nháy 3 l?n

    // reset 
    always @(posedge clk) begin
        if (reset) begin
            state <= S0;
            seq <= 12'b0;
            y <= 0;
            timer <= 0;  // Reset timer
            led_timer <= 0;  // Reset led_timer
            blink_timer <= 0;  // Reset blink_timer
            blink_count <= 0;  // Reset blink_count
            green_led <= 0;  // T?t ?èn xanh khi reset
            red_led <= 0;    // T?t ?èn ?? khi reset
        end else begin
            state <= next_state;
            if (timer > 0)  // N?u b? ??m th?i gian ?ang ho?t ??ng
                timer <= timer - 1;  // Gi?m timer m?i chu k? clock
            if (led_timer > 0)  // N?u b? ??m LED ?ang ho?t ??ng
                led_timer <= led_timer - 1;  // Gi?m led_timer m?i chu k? clock
            if (blink_timer > 0)  // N?u b? ??m nh?p nháy ?èn ?? ?ang ho?t ??ng
                blink_timer <= blink_timer - 1;  // Gi?m blink_timer m?i chu k? clock
        end
    end

    // State change (FSM)
    always @(btn, state) begin
        case(state)
            S0: if (btn == 4'b0001) begin
                    seq[2:0] <= 3'b001;  // Nh?n nút 1
                    next_state = S1;
                    timer <= TIME_OUT;  // B?t ??u ??m th?i gian khi có thao tác
                end else next_state = S0;

            S1: if (btn == 4'b0101) begin
                    seq[5:3] <= 3'b011;  // Nh?n nút 3
                    next_state = S2;
                    timer <= TIME_OUT;  // Reset timer m?i khi có thao tác m?i
                end else next_state = error;

            S2: if (btn == 4'b0111) begin 
                    seq[8:6] <= 3'b010;  // Nh?n nút 2
                    next_state = S3;
                    timer <= TIME_OUT;  // Reset timer m?i khi có thao tác m?i
                end else next_state = error;

            S3: if (btn == 4'b1111) begin 
                    seq[11:9] <= 3'b100;  // Nh?n nút 4
                    next_state = success;
                    timer <= TIME_OUT;  // Reset timer m?i khi có thao tác m?i
                    led_timer <= LED_TIME;  // B?t ??u ??m cho ?èn LED sáng trong 3 giây
                end else next_state = error;

            error: begin
                next_state = (blink_count < MAX_BLINK) ? error : S0;  // N?u ch?a nh?p nháy ?? 3 l?n, ti?p t?c ? tr?ng thái l?i
                seq <= 12'b0;  // Reset l?i seq khi có l?i
                timer <= 0;  // Reset timer
                led_timer <= 0;  // Reset led_timer
                blink_timer <= BLINK_TIME;  // B?t ??u nh?p nháy ?èn ??
                if (blink_timer == BLINK_TIME) begin
                    red_led <= ~red_led;  // ??i tr?ng thái ?èn ?? (nh?p nháy)
                    blink_count <= blink_count + 1;  // T?ng s? l?n nh?p nháy
                end
            end

            success: begin
                next_state = (timer == 0) ? S0 : success;  // N?u h?t th?i gian (10 giây), quay l?i S0
                seq <= 12'b0;  // Reset seq sau khi thành công
                green_led <= 1;  // ??m b?o ?èn xanh b?t khi m?t kh?u ?úng
                if (led_timer == 0) begin
                    green_led <= 0;  // T?t ?èn xanh sau 3 giây
                end
            end

            default: next_state = S0;
        endcase
    end

    // Output Logic
    always @(state) begin
        y = (state == success) ? 1 : 0;
        red_led = (state == error) ? red_led : 0;  // ?èn ?? s? nh?p nháy trong tr?ng thái l?i
    end

endmodule

